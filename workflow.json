{
  "connections": {
    "googleAdmin": {
      "base": "https://admin.googleapis.com/admin/directory/v1",
      "auth": "Bearer {googleAccessToken}"
    },
    "googleCI": {
      "base": "https://cloudidentity.googleapis.com/v1",
      "auth": "Bearer {googleAccessToken}"
    },
    "graphGA": {
      "base": "https://graph.microsoft.com/v1.0",
      "auth": "Bearer {azureAccessToken}"
    },
    "graphBeta": {
      "base": "https://graph.microsoft.com/beta",
      "auth": "Bearer {azureAccessToken}"
    }
  },
  "roles": {
    "dirDomainRW": [
      "https://www.googleapis.com/auth/admin.directory.domain",
      "https://www.googleapis.com/auth/siteverification"
    ],
    "dirOrgunitRW": ["https://www.googleapis.com/auth/admin.directory.orgunit"],
    "dirUserRW": ["https://www.googleapis.com/auth/admin.directory.user"],
    "dirRoleRW": [
      "https://www.googleapis.com/auth/admin.directory.rolemanagement"
    ],
    "ciInboundSso": [
      "https://www.googleapis.com/auth/cloud-identity.inboundsso"
    ],
    "graphAppRW": ["Application.ReadWrite.All"],
    "graphSyncRW": ["Synchronization.ReadWrite.All"],
    "graphPolicyRW": ["Policy.ReadWrite.ApplicationConfiguration"],
    "graphAppRole": ["AppRoleAssignment.ReadWrite.All"]
  },
  "endpoints": {
    "admin.getDomain": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/domains/{domainName}"
    },
    "admin.listDomains": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/domains"
    },
    "admin.postDomain": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/domains"
    },
    "admin.listOUAutomation": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/orgunits",
      "qs": {
        "orgUnitPath": "/Automation",
        "type": "children"
      }
    },
    "admin.postOU": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/orgunits"
    },
    "admin.getUser": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/users/{email('azuread-provisioning', domainName)}"
    },
    "admin.postUser": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/users"
    },
    "admin.listRoles": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roles"
    },
    "admin.postRole": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/roles"
    },
    "admin.listPrivileges": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roles/ALL/privileges"
    },

    "admin.getRoleAssign": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roleassignments",
      "qs": {
        "roleId": "{adminRoleId}",
        "assignedTo": "{provisioningUserId}"
      }
    },
    "admin.postRoleAssign": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/roleassignments"
    },
    "ci.listSamlProfiles": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSamlSsoProfiles"
    },
    "ci.createSamlProfile": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSamlSsoProfiles"
    },
    "ci.getIdpCreds": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSamlSsoProfiles/{samlProfileId}/idpCredentials"
    },
    "ci.addIdpCert": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSamlSsoProfiles/{samlProfileId}/idpCredentials:add"
    },
    "ci.listSsoAssignments": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSsoAssignments"
    },
    "ci.postSsoAssignment": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSsoAssignments"
    },
    "graph.instantiateProv": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/applicationTemplates/{provTemplateId}/instantiate"
    },
    "graph.instantiateSSO": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/applicationTemplates/{ssoTemplateId}/instantiate"
    },
    "graph.appByTemplateProv": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/applications",
      "qs": {
        "$filter": "applicationTemplateId eq '{provTemplateId}'"
      }
    },
    "graph.appByTemplateSSO": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/applications",
      "qs": {
        "$filter": "applicationTemplateId eq '{ssoTemplateId}'"
      }
    },
    "graph.getSync": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization"
    },
    "graph.patchSync": {
      "conn": "graphGA",
      "method": "PATCH",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization"
    },
    "graph.startSyncJob": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization/jobs/{jobId}/start"
    },
    "graph.getSamlSettings": {
      "conn": "graphBeta",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/samlSingleSignOnSettings"
    },
    "graph.patchSamlSettings": {
      "conn": "graphBeta",
      "method": "PATCH",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/samlSingleSignOnSettings"
    },
    "graph.listPolicies": {
      "conn": "graphBeta",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/tokenIssuancePolicies"
    },
    "graph.createPolicy": {
      "conn": "graphBeta",
      "method": "POST",
      "path": "/policies/tokenIssuancePolicies"
    },
    "graph.linkPolicy": {
      "conn": "graphBeta",
      "method": "POST",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/tokenIssuancePolicies/$ref"
    },
    "graph.getAppRoleAssign": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/appRoleAssignedTo",
      "qs": {
        "$filter": "principalId eq {principalId}"
      }
    },
    "graph.postAppRoleAssign": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/appRoleAssignedTo"
    }
  },
  "checkers": {
    "exists": "$ != null",
    "fieldTruthy": "$.{field} == true",
    "eq": "$ == '{value}'"
  },
  "variables": {
    "customerId": {
      "validator": "^C[0-9a-f]{10,}$|^my_customer$",
      "default": "my_customer"
    },
    "domainName": {
      "validator": "^([\\w-]+\\.)+[A-Za-z]{2,}$",
      "default": "feeley.xyz",
      "_comment": "Manual override domain - defaults to feeley.xyz but can be changed"
    },
    "primaryDomain": {
      "_comment": "Primary domain fetched from Google Admin API on initialization"
    },
    "googleAccessToken": {},
    "azureAccessToken": {},
    "generatedPassword": {
      "generator": "randomPassword(16)"
    },
    "provisioningUserId": {},
    "provisioningUserEmail": {},
    "adminRoleId": {},
    "directoryServiceId": {},

    "samlProfileId": {},
    "entityId": {},
    "acsUrl": {},
    "provTemplateId": {
      "default": "d0d8633b-4174-4d05-89c7-86d229f50f26"
    },
    "ssoTemplateId": {
      "default": "8ba3d1d8-7c8c-4d2d-b179-04d4a68fba02"
    },
    "provServicePrincipalId": {},
    "ssoServicePrincipalId": {},
    "jobId": {
      "default": "Initial"
    },
    "claimsPolicyId": {},
    "principalId": {},
    "tenantId": {
      "_comment": "Microsoft tenant ID from environment configuration"
    }
  },
  "steps": [
    {
      "name": "Verify Primary Domain",
      "inputs": [],
      "outputs": ["primaryDomain"],
      "actions": [
        {
          "use": "admin.listDomains",
          "extract": {
            "primaryDomain": "$.domains[?(@.isPrimary)].domainName"
          }
        },
        {
          "use": "admin.getDomain",
          "checker": "fieldTruthy",
          "field": "verified"
        },
        {
          "use": "admin.postDomain",
          "payload": {
            "domainName": "{primaryDomain}"
          },
          "fallback": true
        }
      ],
      "role": "dirDomainRW"
    },
    {
      "name": "OU Automation",
      "inputs": ["primaryDomain"],
      "outputs": [],
      "actions": [
        {
          "use": "admin.listOUAutomation",
          "checker": "exists"
        },
        {
          "use": "admin.postOU",
          "payload": {
            "name": "Automation",
            "parentOrgUnitPath": "/"
          },
          "fallback": true
        }
      ],
      "role": "dirOrgunitRW",
      "depends_on": ["Verify Primary Domain"]
    },
    {
      "name": "Service user",
      "inputs": ["primaryDomain"],
      "outputs": ["provisioningUserId", "provisioningUserEmail"],
      "actions": [
        {
          "use": "admin.getUser",
          "extract": {
            "provisioningUserId": "$.id",
            "provisioningUserEmail": "$.primaryEmail"
          }
        },
        {
          "use": "admin.postUser",
          "payload": {
            "primaryEmail": "{email('azuread-provisioning', primaryDomain)}",
            "name": {
              "givenName": "Microsoft",
              "familyName": "Provisioning"
            },
            "password": "{generatedPassword}",
            "orgUnitPath": "/Automation"
          },
          "extract": {
            "provisioningUserId": "$.id",
            "provisioningUserEmail": "$.primaryEmail"
          },
          "fallback": true
        }
      ],
      "role": "dirUserRW",
      "depends_on": ["OU Automation"]
    },
    {
      "name": "Custom admin role",
      "inputs": ["customerId"],
      "outputs": ["adminRoleId", "directoryServiceId"],
      "actions": [
        {
          "use": "admin.listRoles",
          "checker": "exists",
          "extract": {
            "adminRoleId": "$.items[?(@.roleName=='Microsoft Entra Provisioning')].roleId",
            "directoryServiceId": "$.items[?(@.roleName=='Microsoft Entra Provisioning')].rolePrivileges[0].serviceId"
          }
        },
        {
          "use": "admin.listPrivileges",
          "extract": {
            "directoryServiceId": "$.items[?(@.serviceName=='Admin Directory API')].serviceId"
          },
          "fallback": true
        },
        {
          "use": "admin.postRole",
          "payload": {
            "roleName": "Microsoft Entra Provisioning",
            "roleDescription": "Custom role for Microsoft Entra provisioning service",
            "rolePrivileges": [
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_RETRIEVE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_CREATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_UPDATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "GROUPS_RETRIEVE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "GROUPS_CREATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "ORG_UNITS_RETRIEVE"
              }
            ]
          },
          "extract": {
            "adminRoleId": "$.roleId"
          },
          "fallback": true
        }
      ],
      "role": "dirRoleRW",
      "depends_on": ["Service user"]
    },
    {
      "name": "Assign role to user",
      "inputs": ["adminRoleId", "primaryDomain"],
      "outputs": [],
      "actions": [
        {
          "use": "admin.getRoleAssign",
          "checker": "exists"
        },
        {
          "use": "admin.postRoleAssign",
          "payload": {
            "roleId": "{adminRoleId}",
            "assignedTo": "{email('azuread-provisioning', primaryDomain)}",
            "scopeType": "CUSTOMER"
          },
          "fallback": true
        }
      ],
      "role": "dirRoleRW",
      "depends_on": ["Custom admin role"]
    },
    {
      "name": "Inbound SAML profile",
      "verify": [
        {
          "use": "ci.listSamlProfiles",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "ci.createSamlProfile",
          "payload": {
            "displayName": "Azure AD",
            "idpConfig": {
              "entityId": "{url('https://sts.windows.net', tenantId)}/",
              "singleSignOnServiceUri": "{url('https://login.microsoftonline.com', concat(tenantId, '/saml2'))}"
            }
          },
          "outputs": {
            "samlProfileId": "$.name",
            "entityId": "$.idpConfig.entityId",
            "acsUrl": "$.spConfig.acsUri"
          },
          "longRunning": true
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Assign role to user"],
      "apiStatus": "beta"
    },
    {
      "name": "Add IdP certificate",
      "verify": [
        {
          "use": "ci.getIdpCreds",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "ci.addIdpCert",
          "payload": {
            "pemData": "-----BEGIN CERTIFICATE-----..."
          },
          "longRunning": true
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Inbound SAML profile"]
    },
    {
      "name": "Provisioning app SP",
      "verify": [
        {
          "use": "graph.appByTemplateProv",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "graph.instantiateProv",
          "payload": {
            "displayName": "Google Cloud (Provisioning)"
          },
          "outputs": {
            "provServicePrincipalId": "$.servicePrincipal.id"
          }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["Add IdP certificate"]
    },
    {
      "name": "Set provisioning credentials",
      "verify": [
        {
          "use": "graph.getSync",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "graph.patchSync",
          "payload": {
            "credentials": {
              "fields": [
                {
                  "name": "Username",
                  "value": "{provisioningUserEmail}"
                },
                {
                  "name": "Password",
                  "value": "{provisioningUserPassword}"
                }
              ]
            },
            "schedule": {
              "interval": "PT40M"
            },
            "templateId": "sync-schema-v2"
          }
        }
      ],
      "role": "graphSyncRW",
      "depends_on": ["Provisioning app SP"]
    },
    {
      "name": "Start provisioning sync",
      "verify": [
        {
          "use": "graph.getSync",
          "checker": "fieldTruthy",
          "field": "state=='active'"
        }
      ],
      "execute": [
        {
          "use": "graph.startSyncJob"
        }
      ],
      "role": "graphSyncRW",
      "depends_on": ["Set provisioning credentials"]
    },
    {
      "name": "SSO app SP",
      "verify": [
        {
          "use": "graph.appByTemplateSSO",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "graph.instantiateSSO",
          "payload": {
            "displayName": "Google Cloud"
          },
          "outputs": {
            "ssoServicePrincipalId": "$.servicePrincipal.id"
          }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["Add IdP certificate"]
    },
    {
      "name": "Basic SAML settings",
      "verify": [
        {
          "use": "graph.getSamlSettings",
          "checker": "eq",
          "value": "{entityId}",
          "jsonPath": "$.identifierUris[0]"
        }
      ],
      "execute": [
        {
          "use": "graph.patchSamlSettings",
          "payload": {
            "identifierUris": ["{entityId}"],
            "replyUrls": ["{acsUrl}"]
          }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["SSO app SP"],
      "apiStatus": "beta"
    },
    {
      "name": "Claims mapping policy",
      "verify": [
        {
          "use": "graph.listPolicies",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "graph.createPolicy",
          "payload": {
            "displayName": "Google Claims",
            "definition": [
              "{ \\\"claimsMapping\\\": { \\\"user\\\": { \\\"given_name\\\": \\\"user.givenName\\\" } } }"
            ]
          },
          "outputs": {
            "claimsPolicyId": "$.id"
          }
        },
        {
          "use": "graph.linkPolicy",
          "payload": {
            "@odata.id": "{url('https://graph.microsoft.com/beta/policies/tokenIssuancePolicies', claimsPolicyId)}"
          }
        }
      ],
      "role": "graphPolicyRW",
      "depends_on": ["Basic SAML settings"],
      "apiStatus": "beta"
    },
    {
      "name": "Assign user/group to SSO app",
      "verify": [
        {
          "use": "graph.getAppRoleAssign",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "graph.postAppRoleAssign",
          "payload": {
            "principalId": "{principalId}",
            "resourceId": "{ssoServicePrincipalId}",
            "appRoleId": "00000000-0000-0000-0000-000000000000"
          }
        }
      ],
      "role": "graphAppRole",
      "depends_on": ["Claims mapping policy"]
    },
    {
      "name": "Assign SAML profile to root OU",
      "verify": [
        {
          "use": "ci.listSsoAssignments",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "ci.postSsoAssignment",
          "payload": {
            "samlSsoProfile": "{samlProfileId}",
            "targetOrgUnit": "/",
            "ssoMode": "SAML_SSO"
          }
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Assign user/group to SSO app"]
    },
    {
      "name": "Disable SSO for /Automation OU",
      "verify": [
        {
          "use": "ci.listSsoAssignments",
          "checker": "exists"
        }
      ],
      "execute": [
        {
          "use": "ci.postSsoAssignment",
          "payload": {
            "samlSsoProfile": "{samlProfileId}",
            "targetOrgUnit": "/Automation",
            "ssoMode": "SSO_OFF"
          }
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Assign SAML profile to root OU"]
    },
    {
      "name": "Manual SSO test",
      "manual": true,
      "depends_on": ["Disable SSO for /Automation OU"]
    }
  ]
}
