{
  "connections": {
    "googleAdmin": {
      "base": "https://admin.googleapis.com/admin/directory/v1",
      "auth": "Bearer {googleAccessToken}"
    },
    "googleCI": {
      "base": "https://cloudidentity.googleapis.com/v1",
      "auth": "Bearer {googleAccessToken}"
    },
    "graphGA": {
      "base": "https://graph.microsoft.com/v1.0",
      "auth": "Bearer {azureAccessToken}"
    },
    "graphBeta": {
      "base": "https://graph.microsoft.com/beta",
      "auth": "Bearer {azureAccessToken}"
    },
    "public": { "base": "", "auth": "none" }
  },
  "roles": {
    "dirDomainRW": [
      "https://www.googleapis.com/auth/admin.directory.domain",
      "https://www.googleapis.com/auth/siteverification"
    ],
    "dirOrgunitRW": ["https://www.googleapis.com/auth/admin.directory.orgunit"],
    "dirUserRW": ["https://www.googleapis.com/auth/admin.directory.user"],
    "dirRoleRW": [
      "https://www.googleapis.com/auth/admin.directory.rolemanagement"
    ],
    "ciInboundSso": [
      "https://www.googleapis.com/auth/cloud-identity.inboundsso"
    ],
    "graphAppRW": ["Application.ReadWrite.All"],
    "graphSyncRW": ["Synchronization.ReadWrite.All"],
    "graphPolicyRW": ["Policy.ReadWrite.ApplicationConfiguration"],
    "graphAppRole": ["AppRoleAssignment.ReadWrite.All"]
  },
  "endpoints": {
    "admin.getDomain": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/domains/{domainName}"
    },
    "admin.listDomains": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/domains"
    },
    "admin.postDomain": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/domains"
    },
    "admin.listOUAutomation": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/orgunits",
      "qs": { "orgUnitPath": "/Automation", "type": "children" }
    },
    "admin.postOU": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/orgunits"
    },
    "admin.getUser": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/users/{email('azuread-provisioning', primaryDomain)}"
    },
    "admin.postUser": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/users"
    },
    "admin.listRoles": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roles"
    },
    "admin.postRole": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/roles"
    },
    "admin.listPrivileges": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roles/ALL/privileges"
    },

    "admin.getRoleAssign": {
      "conn": "googleAdmin",
      "method": "GET",
      "path": "/customer/{customerId}/roleassignments",
      "qs": { "roleId": "{adminRoleId}", "assignedTo": "{provisioningUserId}" }
    },
    "admin.postRoleAssign": {
      "conn": "googleAdmin",
      "method": "POST",
      "path": "/customer/{customerId}/roleassignments"
    },
    "ci.listSamlProfiles": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSamlSsoProfiles"
    },
    "ci.createSamlProfile": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSamlSsoProfiles"
    },
    "ci.getIdpCreds": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSamlSsoProfiles/{samlProfileId}/idpCredentials"
    },
    "ci.addIdpCert": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSamlSsoProfiles/{samlProfileId}/idpCredentials:add"
    },
    "ci.listSsoAssignments": {
      "conn": "googleCI",
      "method": "GET",
      "path": "/inboundSsoAssignments"
    },
    "ci.postSsoAssignment": {
      "conn": "googleCI",
      "method": "POST",
      "path": "/inboundSsoAssignments"
    },
    "graph.instantiateProv": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/applicationTemplates/{provTemplateId}/instantiate"
    },
    "graph.instantiateSSO": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/applicationTemplates/{ssoTemplateId}/instantiate"
    },
    "graph.appByTemplateProv": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/applications",
      "qs": { "$filter": "applicationTemplateId eq '{provTemplateId}'" }
    },
    "graph.appByTemplateSSO": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/applications",
      "qs": { "$filter": "applicationTemplateId eq '{ssoTemplateId}'" }
    },
    "graph.getSync": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization"
    },
    "graph.patchSync": {
      "conn": "graphGA",
      "method": "PATCH",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization"
    },
    "graph.startSyncJob": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/servicePrincipals/{provServicePrincipalId}/synchronization/jobs/{jobId}/start"
    },
    "graph.getSamlSettings": {
      "conn": "graphBeta",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/samlSingleSignOnSettings"
    },
    "graph.patchSamlSettings": {
      "conn": "graphBeta",
      "method": "PATCH",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/samlSingleSignOnSettings"
    },
    "graph.listPolicies": {
      "conn": "graphBeta",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/tokenIssuancePolicies"
    },
    "graph.createPolicy": {
      "conn": "graphBeta",
      "method": "POST",
      "path": "/policies/tokenIssuancePolicies"
    },
    "graph.linkPolicy": {
      "conn": "graphBeta",
      "method": "POST",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/tokenIssuancePolicies/$ref"
    },
    "graph.getAppRoleAssign": {
      "conn": "graphGA",
      "method": "GET",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/appRoleAssignedTo",
      "qs": { "$filter": "principalId eq {principalId}" }
    },
    "graph.postAppRoleAssign": {
      "conn": "graphGA",
      "method": "POST",
      "path": "/servicePrincipals/{ssoServicePrincipalId}/appRoleAssignedTo"
    },
    "web.fetchMetadata": {
      "conn": "public",
      "method": "GET",
      "path": "https://login.microsoftonline.com/{tenantId}/federationmetadata/2007-06/federationmetadata.xml?appid={ssoAppId}"
    }
  },
  "checkers": {
    "exists": "$ != null",
    "fieldTruthy": "$.{field} == true",
    "eq": "$ == '{value}'"
  },
  "variables": {
    "customerId": {
      "validator": "^C[0-9a-f]{10,}$|^my_customer$",
      "default": "my_customer"
    },
    "domainName": {
      "validator": "^([\\w-]+\\.)+[A-Za-z]{2,}$",
      "default": "feeley.xyz",
      "_comment": "Manual override domain - defaults to feeley.xyz but can be changed"
    },
    "primaryDomain": {
      "_comment": "Primary domain fetched from Google Admin API on initialization"
    },
    "googleAccessToken": {},
    "azureAccessToken": {},
    "provisioningUserId": {},
    "provisioningUserEmail": {},
    "adminRoleId": {},
    "directoryServiceId": {},

    "samlProfileId": {},
    "entityId": {},
    "acsUrl": {},
    "provTemplateId": { "default": "d0d8633b-4174-4d05-89c7-86d229f50f26" },
    "ssoTemplateId": { "default": "8ba3d1d8-7c8c-4d2d-b179-04d4a68fba02" },
    "provServicePrincipalId": {},
    "ssoServicePrincipalId": {},
    "ssoAppId": {},
    "jobId": { "default": "Initial" },
    "claimsPolicyId": {},
    "principalId": {},
    "generatedPassword": {},
    "tenantId": {
      "_comment": "Microsoft tenant ID from environment configuration"
    },
    "manualStepsState": {
      "_comment": "JSON string storing completed manual steps"
    }
  },
  "steps": [
    {
      "name": "Verify Primary Domain",
      "description": "Ensures your Google Workspace primary domain is verified and ready for SSO integration. This is required before any other configuration can proceed.",
      "inputs": [],
      "outputs": ["primaryDomain"],
      "actions": [
        {
          "use": "admin.listDomains",
          "extract": {
            "primaryDomain": "$.domains[?(@.isPrimary)].domainName",
            "domainName": "$.domains[?(@.isPrimary)].domainName"
          }
        },
        {
          "use": "admin.getDomain",
          "checker": "fieldTruthy",
          "field": "verified"
        },
        {
          "use": "admin.postDomain",
          "payload": { "domainName": "{primaryDomain}" },
          "fallback": true
        }
      ],
      "role": "dirDomainRW"
    },
    {
      "name": "Create Automation Organizational Unit",
      "description": "Creates a special folder '/Automation' in Google Workspace to house service accounts that need to bypass SSO and use passwords instead.",
      "inputs": ["primaryDomain"],
      "outputs": [],
      "actions": [
        { "use": "admin.listOUAutomation", "checker": "exists" },
        {
          "use": "admin.postOU",
          "payload": { "name": "Automation", "parentOrgUnitPath": "/" },
          "fallback": true
        }
      ],
      "role": "dirOrgunitRW",
      "depends_on": ["Verify Primary Domain"]
    },
    {
      "name": "Create Service Account for Microsoft",
      "description": "Creates a dedicated Google account that Microsoft Entra ID will use to sync users and groups to your Google Workspace. The password will be generated automatically.",
      "inputs": ["primaryDomain"],
      "outputs": ["provisioningUserId", "provisioningUserEmail"],
      "actions": [
        {
          "use": "admin.getUser",
          "extract": {
            "provisioningUserId": "$.id",
            "provisioningUserEmail": "$.primaryEmail"
          }
        },
        {
          "use": "admin.postUser",
          "payload": {
            "primaryEmail": "{email('azuread-provisioning', primaryDomain)}",
            "name": { "givenName": "Microsoft", "familyName": "Provisioning" },
            "password": "{generatePassword(16)}",
            "orgUnitPath": "/Automation"
          },
          "extract": {
            "provisioningUserId": "$.id",
            "provisioningUserEmail": "$.primaryEmail",
            "generatedPassword": "_generated_password_displayed"
          },
          "fallback": true
        }
      ],
      "role": "dirUserRW",
      "depends_on": ["Create Automation Organizational Unit"]
    },
    {
      "name": "Create Custom Admin Role",
      "description": "Sets up a limited admin role with only the permissions Microsoft needs for user provisioning (create, read, update users and groups).",
      "inputs": ["customerId"],
      "outputs": ["adminRoleId", "directoryServiceId"],
      "actions": [
        {
          "use": "admin.listRoles",
          "checker": "exists",
          "extract": {
            "adminRoleId": "$.items[?(@.roleName=='Microsoft Entra Provisioning')].roleId",
            "directoryServiceId": "$.items[?(@.roleName=='Microsoft Entra Provisioning')].rolePrivileges[0].serviceId"
          }
        },
        {
          "use": "admin.listPrivileges",
          "extract": {
            "directoryServiceId": "$.items[?(@.privilegeName=='USERS_RETRIEVE')].serviceId"
          },
          "fallback": true
        },
        {
          "use": "admin.postRole",
          "payload": {
            "roleName": "Microsoft Entra Provisioning",
            "roleDescription": "Custom role for Microsoft Entra provisioning service",
            "rolePrivileges": [
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_RETRIEVE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_CREATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "USERS_UPDATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "GROUPS_RETRIEVE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "GROUPS_CREATE"
              },
              {
                "serviceId": "{directoryServiceId}",
                "privilegeName": "ORG_UNITS_RETRIEVE"
              }
            ]
          },
          "extract": { "adminRoleId": "$.roleId" },
          "fallback": true
        }
      ],
      "role": "dirRoleRW",
      "depends_on": ["Create Service Account for Microsoft"]
    },
    {
      "name": "Assign Admin Role to Service Account",
      "description": "Grants the Microsoft service account the custom admin permissions it needs to manage users in your Google Workspace.",
      "inputs": ["adminRoleId", "primaryDomain"],
      "outputs": [],
      "actions": [
        { "use": "admin.getRoleAssign", "checker": "exists" },
        {
          "use": "admin.postRoleAssign",
          "payload": {
            "roleId": "{adminRoleId}",
            "assignedTo": "{email('azuread-provisioning', primaryDomain)}",
            "scopeType": "CUSTOMER"
          },
          "fallback": true
        }
      ],
      "role": "dirRoleRW",
      "depends_on": ["Create Custom Admin Role"]
    },
    {
      "name": "Create SAML Profile for SSO",
      "description": "Configures the SAML settings that allow Microsoft Entra ID to authenticate your Google Workspace users.",
      "verify": [{ "use": "ci.listSamlProfiles", "checker": "exists" }],
      "execute": [
        {
          "use": "ci.createSamlProfile",
          "payload": {
            "displayName": "Azure AD",
            "idpConfig": {
              "entityId": "{url('https://sts.windows.net', tenantId)}/",
              "singleSignOnServiceUri": "{url('https://login.microsoftonline.com', concat(tenantId, '/saml2'))}"
            }
          },
          "extract": {
            "samlProfileId": "$.name",
            "entityId": "$.idpConfig.entityId",
            "acsUrl": "$.spConfig.acsUri"
          },
          "longRunning": true
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Assign Admin Role to Service Account"],
      "apiStatus": "beta"
    },
    {
      "name": "Add Microsoft Identity Certificate",
      "description": "Automatically fetches and installs Microsoft's SAML signing certificate",
      "inputs": ["tenantId", "ssoAppId"],
      "depends_on": ["Create Microsoft SSO App"],
      "verify": [{ "use": "ci.getIdpCreds", "checker": "exists" }],
      "execute": [
        { "use": "web.fetchMetadata", "extract": { "rawXmlResponse": "$" } },
        {
          "use": "ci.addIdpCert",
          "payload": {
            "pemData": "{extractCertificateFromXml(rawXmlResponse)}"
          }
        }
      ],
      "role": "ciInboundSso"
    },
    {
      "name": "Create Microsoft Provisioning App",
      "description": "Sets up the Microsoft Entra ID app that will automatically sync users from Azure AD to Google Workspace.",
      "verify": [{ "use": "graph.appByTemplateProv", "checker": "exists" }],
      "execute": [
        {
          "use": "graph.instantiateProv",
          "payload": { "displayName": "Google Cloud (Provisioning)" },
          "extract": { "provServicePrincipalId": "$.servicePrincipal.id" }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["Create SAML Profile for SSO"]
    },
    {
      "name": "Configure User Provisioning",
      "description": "Provides Microsoft with the service account credentials to access your Google Workspace directory API.",
      "verify": [{ "use": "graph.getSync", "checker": "exists" }],
      "execute": [
        {
          "use": "graph.patchSync",
          "payload": {
            "secrets": [
              {
                "key": "BaseAddress",
                "value": "https://admin.googleapis.com/admin/directory/v1"
              },
              { "key": "SecretKey", "value": "{generatedPassword}" }
            ]
          }
        }
      ],
      "role": "graphSyncRW",
      "depends_on": ["Create Microsoft Provisioning App"]
    },
    {
      "name": "Start User Synchronization",
      "description": "Activates the sync process to begin provisioning users from Microsoft Entra ID to Google Workspace every 40 minutes.",
      "verify": [
        {
          "use": "graph.getSync",
          "checker": "fieldTruthy",
          "field": "state=='active'"
        }
      ],
      "execute": [{ "use": "graph.startSyncJob" }],
      "role": "graphSyncRW",
      "depends_on": ["Configure User Provisioning"]
    },
    {
      "name": "Create Microsoft SSO App",
      "description": "Sets up the Microsoft app that handles single sign-on authentication",
      "outputs": ["ssoServicePrincipalId", "ssoAppId"],
      "verify": [{ "use": "graph.appByTemplateSSO", "checker": "exists" }],
      "execute": [
        {
          "use": "graph.instantiateSSO",
          "payload": { "displayName": "Google Cloud" },
          "extract": {
            "ssoServicePrincipalId": "$.servicePrincipal.id",
            "ssoAppId": "$.application.appId"
          }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["Create Microsoft Provisioning App"]
    },
    {
      "name": "Configure SAML Settings",
      "description": "Configures the technical SAML parameters (Entity ID, ACS URL) for secure authentication between Microsoft and Google.",
      "verify": [
        {
          "use": "graph.getSamlSettings",
          "checker": "eq",
          "value": "{entityId}",
          "jsonPath": "$.identifierUris[0]"
        }
      ],
      "execute": [
        {
          "use": "graph.patchSamlSettings",
          "payload": {
            "identifierUris": ["{entityId}"],
            "replyUrls": ["{acsUrl}"]
          }
        }
      ],
      "role": "graphAppRW",
      "depends_on": ["Create Microsoft SSO App"],
      "apiStatus": "beta"
    },
    {
      "name": "Create Claims Mapping Policy",
      "description": "Defines how Microsoft user attributes map to Google user attributes. By default, maps email to email.",
      "verify": [{ "use": "graph.listPolicies", "checker": "exists" }],
      "execute": [
        {
          "use": "graph.createPolicy",
          "payload": {
            "displayName": "Google Workspace Basic Claims",
            "definition": [
              "{\"ClaimsMappingPolicy\":{\"Version\":1,\"IncludeBasicClaimSet\":true,\"ClaimsMapping\":{\"email\":{\"source\":\"user\",\"id\":\"mail\"}}}}"
            ]
          },
          "extract": { "claimsPolicyId": "$.id" }
        },
        {
          "use": "graph.linkPolicy",
          "payload": {
            "@odata.id": "{url('https://graph.microsoft.com/beta/policies/tokenIssuancePolicies', claimsPolicyId)}"
          }
        }
      ],
      "role": "graphPolicyRW",
      "depends_on": ["Configure SAML Settings"],
      "apiStatus": "beta"
    },
    {
      "name": "Assign Users to SSO App",
      "description": "For now, this step requires manual configuration in Azure Portal. In most cases, assign 'All Users' to the SSO app.",
      "inputs": ["ssoServicePrincipalId"],
      "manual": true,
      "depends_on": ["Create Claims Mapping Policy"]
    },
    {
      "name": "Enable SSO for Organization",
      "description": "Activates SSO for all users in your Google Workspace organization (except those in /Automation).",
      "verify": [{ "use": "ci.listSsoAssignments", "checker": "exists" }],
      "execute": [
        {
          "use": "ci.postSsoAssignment",
          "payload": {
            "samlSsoProfile": "{samlProfileId}",
            "targetOrgUnit": "/",
            "ssoMode": "SAML_SSO"
          }
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Assign Users to SSO App"]
    },
    {
      "name": "Disable SSO for Service Accounts",
      "description": "Ensures service accounts in the /Automation folder can still use passwords instead of SSO.",
      "verify": [{ "use": "ci.listSsoAssignments", "checker": "exists" }],
      "execute": [
        {
          "use": "ci.postSsoAssignment",
          "payload": {
            "samlSsoProfile": "{samlProfileId}",
            "targetOrgUnit": "/Automation",
            "ssoMode": "SSO_OFF"
          }
        }
      ],
      "role": "ciInboundSso",
      "depends_on": ["Enable SSO for Organization"]
    },
    {
      "name": "Test SSO Configuration",
      "description": "Verify that users can successfully sign in to Google Workspace using their Microsoft credentials. Test with a regular user account.",
      "manual": true,
      "depends_on": ["Disable SSO for Service Accounts"]
    }
  ]
}
